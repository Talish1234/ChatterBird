# Basic Media Calling Web App (WebRTC + Socket.IO + Node + React)

A minimal, **1:1 video calling** app using WebRTC for media and **Socket.IO** for signaling. Includes: join by room ID, mic/cam toggle, screen share, and hang up.

---

## Project Structure

```
webrtc-call-app/
├─ server/
│  ├─ package.json
│  └─ index.js
└─ client/
   ├─ package.json
   ├─ index.html
   └─ src/
      ├─ main.jsx
      └─ App.jsx
```

---

## Server (Node.js + Socket.IO)

**server/package.json**

```json
{
  "name": "webrtc-socket-server",
  "version": "1.0.0",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "socket.io": "^4.7.5"
  },
  "devDependencies": {
    "nodemon": "^3.1.0"
  }
}
```

**server/index.js**

```js
import express from 'express';
import http from 'http';
import { Server } from 'socket.io';
import cors from 'cors';

const app = express();
app.use(cors());

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST']
  }
});

// roomId -> Set of socketIds
const rooms = new Map();

io.on('connection', (socket) => {
  let joinedRoom = null;

  socket.on('join-room', (roomId, cb) => {
    joinedRoom = roomId;
    socket.join(roomId);

    if (!rooms.has(roomId)) rooms.set(roomId, new Set());
    const users = rooms.get(roomId);

    // Notify new user about existing peers (1:1 => at most one)
    const others = [...users];
    users.add(socket.id);

    cb && cb({ selfId: socket.id, peers: others });

    // Notify others
    socket.to(roomId).emit('peer-joined', { peerId: socket.id });
  });

  // WebRTC signaling relay
  socket.on('webrtc-offer', ({ to, description }) => {
    io.to(to).emit('webrtc-offer', { from: socket.id, description });
  });

  socket.on('webrtc-answer', ({ to, description }) => {
    io.to(to).emit('webrtc-answer', { from: socket.id, description });
  });

  socket.on('webrtc-ice', ({ to, candidate }) => {
    io.to(to).emit('webrtc-ice', { from: socket.id, candidate });
  });

  socket.on('leave-room', () => {
    handleDisconnect();
  });

  socket.on('disconnect', () => {
    handleDisconnect();
  });

  function handleDisconnect() {
    if (!joinedRoom) return;
    const users = rooms.get(joinedRoom);
    if (users) {
      users.delete(socket.id);
      socket.to(joinedRoom).emit('peer-left', { peerId: socket.id });
      if (users.size === 0) rooms.delete(joinedRoom);
    }
    socket.leave(joinedRoom);
    joinedRoom = null;
  }
});

const PORT = process.env.PORT || 5174;
server.listen(PORT, () => console.log(`\nSocket.IO signaling server running on :${PORT}`));
```

---

## Client (React + Vite)

**client/package.json**

```json
{
  "name": "webrtc-client",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview --port 5175"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "socket.io-client": "^4.7.5"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.3.2",
    "vite": "^5.4.0"
  }
}
```

**client/index.html**

```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WebRTC Call</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
```

**client/src/main.jsx**

```jsx
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
```

\*\*client/src/App.jsx
